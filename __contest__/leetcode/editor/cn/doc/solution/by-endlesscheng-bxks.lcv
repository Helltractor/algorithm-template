## 总体思路

由于「任何时刻只有一辆垃圾车处在使用状态」，我们可以先让收集 M（金属）的垃圾车从左到右跑一趟，然后让收集 P（纸）的垃圾车从左到右跑一趟，最后让收集 G（玻璃）的垃圾车从左到右跑一趟。

总用时可以拆分成两个部分：

1. 收集垃圾的总用时，这等于所有 $\textit{garbage}[i]$ 的长度之和。
2. 行驶的总用时，这等于每辆垃圾车的行驶用时之和。对于收集 M 的垃圾车，设 $\textit{garbage}[i]$ 是最后一个包含 M 的字符串，那么收集 M 的垃圾车的行驶用时为 $\textit{travel}[0]+\textit{travel}[1]+\cdots + \textit{travel}[i-1]$。同理可得另外两辆垃圾车的行驶用时。

下面介绍三种实现方法：

- 第一种方法针对本题数据，看上去会多次遍历数组，但实际跑的飞快。理由见复杂度分析。
- 另外两种方法适用性更广，即使有 $10^5$ 种垃圾也可以通过。

## 方法一：多次遍历

先让所有垃圾车都跑满全程，再倒着遍历 $\textit{garbage}$，减去多跑的时间。

对于收集 M 的垃圾车，设 $\textit{garbage}[i]$ 是最后一个包含 M 的字符串，那么收集 M 的垃圾车的行驶用时，等于跑满全程的用时，减去多跑的用时 $\textit{travel}[i]+\textit{travel}[i+1]+\cdots + \textit{travel}[n-2]$，其中 $n$ 是 $\textit{garbage}$ 的长度。注意 $\textit{travel}$ 的下标和 $\textit{garbage}$ 的下标相差 $1$。

* [sol-Python3]

```py
class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        ans = sum(map(len, garbage)) + sum(travel) * 3
        for c in "MPG":
            for g, t in zip(reversed(garbage), reversed(travel)):
                if c in g:
                    break
                ans -= t  # 没有垃圾 c，多跑了
        return ans
```

* [sol-Java]

```java
class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int ans = 0;
        for (String g : garbage) {
            ans += g.length();
        }
        for (int t : travel) {
            ans += t * 3;
        }
        for (char c : new char[]{'M', 'P', 'G'}) {
            for (int i = garbage.length - 1; i > 0 && garbage[i].indexOf(c) < 0; i--) {
                ans -= travel[i - 1]; // 没有垃圾 c，多跑了
            }
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int ans = reduce(travel.begin(), travel.end()) * 3;
        for (auto& g : garbage) {
            ans += g.length();
        }
        for (char c : {'M', 'P', 'G'}) {
            for (int i = garbage.size() - 1; i && garbage[i].find(c) == string::npos; i--) {
                ans -= travel[i - 1]; // 没有垃圾 c，多跑了
            }
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func garbageCollection(garbage []string, travel []int) (ans int) {
    for _, s := range garbage {
        ans += len(s)
    }
    for _, t := range travel {
        ans += t * 3
    }
    for _, c := range []byte("MPG") {
        for i := len(garbage) - 1; i > 0 && strings.IndexByte(garbage[i], c) < 0; i-- {
            ans -= travel[i-1] // 没有垃圾 c，多跑了
        }
    }
    return
}
```

* [sol-JavaScript]

```js
var garbageCollection = function(garbage, travel) {
    let ans = _.sum(travel) * 3;
    for (const g of garbage) {
        ans += g.length;
    }
    for (const c of ['M', 'P', 'G']) {
        for (let i = garbage.length - 1; i && !garbage[i].includes(c); i--) {
            ans -= travel[i - 1]; // 没有垃圾 c，多跑了
        }
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn garbage_collection(garbage: Vec<String>, travel: Vec<i32>) -> i32 {
        let mut ans = travel.iter().sum::<i32>() * 3 +
            garbage.iter().map(|g| g.len()).sum::<usize>() as i32;
        for c in "MPG".chars() {
            for (g, &t) in garbage.iter().rev().zip(travel.iter().rev()) {
                if g.contains(c) {
                    break;
                }
                ans -= t; // 没有垃圾 c，多跑了
            }
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n+L)$，其中 $n$ 是 $\textit{garbage}$ 的长度，$L$ 是所有 $\textit{garbage}[i]$ 的长度之和。然而，考虑到测试数据包含大量随机生成的数据，在倒序遍历中，循环期望 $\mathcal{O}(1)$ 次就遇到字母 MPG 了，早早地退出循环，所以在随机数据下的时间复杂度为 $\mathcal{O}(n)$。换句话说，只有极少的字符串是需要遍历的，**绝大多数字符串只需获取其长度，无需遍历其具体内容**。
- 空间复杂度：$\mathcal{O}(1)$。

## 方法二：正序一次遍历

我们可以在遍历 $\textit{garbage}$ 的同时，计算从房子 $0$ 到房子 $i$ 的用时 $sumT$，以及一个哈希表（或者数组）$\textit{tMap}$ 记录每辆车目前的行驶用时。例如 $\textit{garbage}[i]=\texttt{GP}$，那么收集 G 和 P 的垃圾车的行驶用时**更新**为 $sumT$，收集 M 的垃圾车的行驶用时**不变**。循环结束后，$\textit{tMap}$ 中保存的就是每辆垃圾车各自的行驶用时了。

最后答案为所有 $\textit{garbage}[i]$ 的长度之和，加上 $\textit{tMap}$ 中保存的行驶用时之和。

* [sol-Python3]

```py
class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        ans = sum_t = 0
        t_map = {}
        for g, t in zip(garbage, [0] + travel):
            ans += len(g)
            sum_t += t
            for c in g:
                t_map[c] = sum_t
        return ans + sum(t_map.values())
```

* [sol-Python3写法二]

```py
class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        ans = sum_t = 0
        t_map = {}
        # 避免 [0] + travel 产生额外空间
        for i, g in enumerate(garbage):
            ans += len(g)
            sum_t += travel[i - 1] if i else 0
            for c in g:
                t_map[c] = sum_t
        return ans + sum(t_map.values())
```

* [sol-Java]

```java
class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int ans = garbage[0].length();
        int sumT = 0;
        int[] tMap = new int[4]; // 如果垃圾种类更多，可以改成哈希表
        for (int i = 1; i < garbage.length; i++) {
            char[] s = garbage[i].toCharArray();
            ans += s.length;
            sumT += travel[i - 1];
            for (char c : s) {
                tMap[c & 3] = sumT; // MPG 的 ASCII 值的低两位互不相同
            }
        }
        for (int t : tMap) {
            ans += t;
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int ans = garbage[0].length();
        int sum_t = 0;
        int t_map[4]{}; // 如果垃圾种类更多，可以改成哈希表
        for (int i = 1; i < garbage.size(); i++) {
            auto& s = garbage[i];
            ans += s.length();
            sum_t += travel[i - 1];
            for (char c : s) {
                t_map[c & 3] = sum_t; // MPG 的 ASCII 值的低两位互不相同
            }
        }
        return ans + reduce(t_map, t_map + 4);
    }
};
```

* [sol-Go]

```go
func garbageCollection(garbage []string, travel []int) int {
    ans := len(garbage[0])
    sumT := 0
    tMap := [4]int{} // 如果垃圾种类更多，可以改成哈希表
    for i, g := range garbage[1:] {
        ans += len(g)
        sumT += travel[i]
        for _, c := range g {
            tMap[c&3] = sumT // MPG 的 ASCII 值的低两位互不相同
        }
    }
    for _, t := range tMap {
        ans += t
    }
    return ans
}
```

* [sol-JavaScript]

```js
var garbageCollection = function(garbage, travel) {
    let ans = garbage[0].length;
    let sumT = 0;
    let tMap = Array(4).fill(0); // 如果垃圾种类更多，可以改成哈希表
    for (let i = 1; i < garbage.length; i++) {
        let g = garbage[i];
        ans += g.length;
        sumT += travel[i - 1];
        for (const c of g) {
            tMap[c.charCodeAt(0) & 3] = sumT; // MPG 的 ASCII 值的低两位互不相同
        }
    }
    return ans + _.sum(tMap);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn garbage_collection(garbage: Vec<String>, travel: Vec<i32>) -> i32 {
        let mut ans = garbage[0].len() as i32;
        let mut sum_t = 0;
        let mut t_map = [0; 4]; // 如果垃圾种类更多，可以改成哈希表
        for i in 1..garbage.len() {
            let s = &garbage[i];
            ans += s.len() as i32;
            sum_t += travel[i - 1];
            for c in s.chars() {
                t_map[c as usize & 3] = sum_t; // MPG 的 ASCII 值的低两位互不相同
            }
        }
        ans + t_map.iter().sum::<i32>()
    }
}
```

进一步地，在遍历 $\textit{garbage}$ 的过程中把行驶时间加入答案，从而做到一次遍历。

* [sol-Python3]

```py
class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        ans = sum_t = 0
        t_map = defaultdict(int)
        for g, t in zip(garbage, [0] + travel):
            ans += len(g)
            sum_t += t
            for c in g:
                ans += sum_t - t_map[c]
                t_map[c] = sum_t
        return ans
```

* [sol-Python3写法二]

```py
class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        ans = sum_t = 0
        t_map = defaultdict(int)
        # 避免 [0] + travel 产生额外空间
        for i, g in enumerate(garbage):
            ans += len(g)
            sum_t += travel[i - 1] if i else 0
            for c in g:
                ans += sum_t - t_map[c]
                t_map[c] = sum_t
        return ans
```

* [sol-Java]

```java
class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int ans = garbage[0].length();
        int sumT = 0;
        int[] tMap = new int[4];
        for (int i = 1; i < garbage.length; i++) {
            char[] s = garbage[i].toCharArray();
            ans += s.length;
            sumT += travel[i - 1];
            for (char c : s) {
                ans += sumT - tMap[c & 3];
                tMap[c & 3] = sumT;
            }
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int ans = garbage[0].length();
        int sum_t = 0;
        int t_map[4]{};
        for (int i = 1; i < garbage.size(); i++) {
            auto& s = garbage[i];
            ans += s.length();
            sum_t += travel[i - 1];
            for (char c : s) {
                ans += sum_t - t_map[c & 3];
                t_map[c & 3] = sum_t;
            }
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func garbageCollection(garbage []string, travel []int) int {
    ans := len(garbage[0])
    sumT := 0
    tMap := [4]int{}
    for i, g := range garbage[1:] {
        ans += len(g)
        sumT += travel[i]
        for _, c := range g {
            ans += sumT - tMap[c&3]
            tMap[c&3] = sumT
        }
    }
    return ans
}
```

* [sol-JavaScript]

```js
var garbageCollection = function(garbage, travel) {
    let ans = garbage[0].length;
    let sumT = 0;
    let tMap = Array(4).fill(0);
    for (let i = 1; i < garbage.length; i++) {
        let g = garbage[i];
        ans += g.length;
        sumT += travel[i - 1];
        for (const c of g) {
            ans += sumT - tMap[c.charCodeAt(0) & 3];
            tMap[c.charCodeAt(0) & 3] = sumT;
        }
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn garbage_collection(garbage: Vec<String>, travel: Vec<i32>) -> i32 {
        let mut ans = garbage[0].len() as i32;
        let mut sum_t = 0;
        let mut t_map = [0; 4];
        for i in 1..garbage.len() {
            let s = &garbage[i];
            ans += s.len() as i32;
            sum_t += travel[i - 1];
            for c in s.chars() {
                ans += sum_t - t_map[c as usize & 3];
                t_map[c as usize & 3] = sum_t;
            }
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n+L)$，其中 $n$ 是 $\textit{garbage}$ 的长度，$L$ 是所有 $\textit{garbage}[i]$ 的长度之和。
- 空间复杂度：$\mathcal{O}(k)$，其中 $k=3$ 表示垃圾种类数。

## 方法三：倒序一次遍历（贡献法）

方法二需要用到哈希表（hash map），能否只用哈希集合（hash set）呢？

- 如果 $\textit{garbage}[n-1]$ 只包含 M，这意味着只有一辆车需要行驶 $\textit{travel}[n-2]$ 分钟，所以 $\textit{travel}[n-2]$ 对答案的贡献是 $\textit{travel}[n-2]\cdot 1$。
- 如果 $\textit{garbage}[n-2] + \textit{garbage}[n-1]$ 包含 M 和 P，这意味着有两辆车需要行驶 $\textit{travel}[n-3]$ 分钟，所以 $\textit{travel}[n-3]$ 对答案的贡献是 $\textit{travel}[n-3]\cdot 2$。
- 依此类推，如果从 $\textit{garbage}[i]$ 到 $\textit{garbage}[n-1]$ 有 $k$ 种字母，那么 $\textit{travel}[i-1]$ 对答案的贡献是 $\textit{travel}[i-1]\cdot k$。

累加贡献即为行驶总用时。

代码实现时，可以用哈希集合（或者布尔数组）记录遇到的字母。

* [sol-Python3]

```py
class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        ans = len(garbage[0])
        seen = set()
        for g, t in zip(reversed(garbage), reversed(travel)):
            seen.update(g)
            ans += len(g) + t * len(seen)
        return ans
```

* [sol-Java]

```java
class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int ans = garbage[0].length();
        HashSet<Character> seen = new HashSet<>();
        for (int i = garbage.length - 1; i > 0; i--) {
            char[] g = garbage[i].toCharArray();
            for (char c : g) {
                seen.add(c);
            }
            ans += g.length + travel[i - 1] * seen.size();
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int ans = garbage[0].length();
        unordered_set<char> seen;
        for (int i = garbage.size() - 1; i; i--) {
            auto& g = garbage[i];
            seen.insert(g.begin(), g.end());
            ans += g.length() + travel[i - 1] * seen.size();
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func garbageCollection(garbage []string, travel []int) int {
    ans := len(garbage[0])
    seen := map[rune]struct{}{}
    for i := len(garbage) - 1; i > 0; i-- {
        g := garbage[i]
        for _, c := range g {
            seen[c] = struct{}{}
        }
        ans += len(g) + travel[i-1]*len(seen)
    }
    return ans
}
```

* [sol-JavaScript]

```js
var garbageCollection = function(garbage, travel) {
    let ans = garbage[0].length;
    const seen = new Set();
    for (let i = garbage.length - 1; i; i--) {
        const g = garbage[i];
        for (const c of g) {
            seen.add(c);
        }
        ans += g.length + travel[i - 1] * seen.size;
    }
    return ans;
};
```

* [sol-Rust]

```rust
use std::collections::HashSet;

impl Solution {
    pub fn garbage_collection(garbage: Vec<String>, travel: Vec<i32>) -> i32 {
        let mut ans = garbage[0].len() as i32;
        let mut seen = HashSet::new();
        for (g, &t) in garbage.iter().rev().zip(travel.iter().rev()) {
            seen.extend(g.chars());
            ans += g.len() as i32 + t * seen.len() as i32;
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n+L)$，其中 $n$ 是 $\textit{garbage}$ 的长度，$L$ 是所有 $\textit{garbage}[i]$ 的长度之和。
- 空间复杂度：$\mathcal{O}(k)$，其中 $k=3$ 表示垃圾种类数。

## 分类题单

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
